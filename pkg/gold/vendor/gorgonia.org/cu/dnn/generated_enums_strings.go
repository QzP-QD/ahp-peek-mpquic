package cudnn

/* Generated by gencudnn. DO NOT EDIT */

// #include <cudnn.h>
import "C"

var _ErrQueryModeNames = map[ErrQueryMode]string{
	Rawcode:     "Rawcode",
	Nonblocking: "Nonblocking",
	Blocking:    "Blocking",
}

func (e ErrQueryMode) String() string { return _ErrQueryModeNames[e] }

var _DataTypeNames = map[DataType]string{
	Float:  "Float",
	Double: "Double",
	Half:   "Half",
	Int8:   "Int8",
	Int32:  "Int32",
	Int8x4: "Int8x4",
}

func (e DataType) String() string { return _DataTypeNames[e] }

var _MathTypeNames = map[MathType]string{
	DefaultMath:  "DefaultMath",
	TensorOpMath: "TensorOpMath",
}

func (e MathType) String() string { return _MathTypeNames[e] }

var _NanPropagationNames = map[NanPropagation]string{
	NotPropagateNan: "NotPropagateNan",
	PropagateNan:    "PropagateNan",
}

func (e NanPropagation) String() string { return _NanPropagationNames[e] }

var _DeterminismNames = map[Determinism]string{
	NonDeterministic: "NonDeterministic",
	Deterministic:    "Deterministic",
}

func (e Determinism) String() string { return _DeterminismNames[e] }

var _TensorFormatNames = map[TensorFormat]string{
	NCHW:      "NCHW",
	NHWC:      "NHWC",
	NCHWVectC: "NCHWVectC",
}

func (e TensorFormat) String() string { return _TensorFormatNames[e] }

var _OpTensorOpNames = map[OpTensorOp]string{
	Add:  "Add",
	Mul:  "Mul",
	Min:  "Min",
	Max:  "Max",
	Sqrt: "Sqrt",
	Not:  "Not",
}

func (e OpTensorOp) String() string { return _OpTensorOpNames[e] }

var _ReduceTensorOpNames = map[ReduceTensorOp]string{
	ReduceAdd:        "ReduceAdd",
	ReduceMul:        "ReduceMul",
	ReduceMin:        "ReduceMin",
	ReduceMax:        "ReduceMax",
	ReduceAmax:       "ReduceAmax",
	ReduceAvg:        "ReduceAvg",
	ReduceNorm1:      "ReduceNorm1",
	ReduceNorm2:      "ReduceNorm2",
	ReduceMulNoZeros: "ReduceMulNoZeros",
}

func (e ReduceTensorOp) String() string { return _ReduceTensorOpNames[e] }

var _ReduceTensorIndicesNames = map[ReduceTensorIndices]string{
	ReduceNoIndices:        "ReduceNoIndices",
	ReduceFlattenedIndices: "ReduceFlattenedIndices",
}

func (e ReduceTensorIndices) String() string { return _ReduceTensorIndicesNames[e] }

var _IndicesTypeNames = map[IndicesType]string{
	Indices32: "Indices32",
	Indices64: "Indices64",
	Indices16: "Indices16",
	Indices8:  "Indices8",
}

func (e IndicesType) String() string { return _IndicesTypeNames[e] }

var _SoftmaxAlgorithmNames = map[SoftmaxAlgorithm]string{
	Fast:     "Fast",
	Accurate: "Accurate",
	Log:      "Log",
}

func (e SoftmaxAlgorithm) String() string { return _SoftmaxAlgorithmNames[e] }

var _SoftmaxModeNames = map[SoftmaxMode]string{
	Instance: "Instance",
	Channel:  "Channel",
}

func (e SoftmaxMode) String() string { return _SoftmaxModeNames[e] }

var _PoolingModeNames = map[PoolingMode]string{
	MaxPooling:                 "MaxPooling",
	AverageCountIncludePadding: "AverageCountIncludePadding",
	AverageCountExcludePadding: "AverageCountExcludePadding",
	MaxDeterministic:           "MaxDeterministic",
}

func (e PoolingMode) String() string { return _PoolingModeNames[e] }

var _ActivationModeNames = map[ActivationMode]string{
	Sigmoid:     "Sigmoid",
	ReLU:        "ReLU",
	Tanh:        "Tanh",
	ClippedReLU: "ClippedReLU",
	Elu:         "Elu",
}

func (e ActivationMode) String() string { return _ActivationModeNames[e] }

var _LRNModeNames = map[LRNMode]string{
	CrossChannelDim1: "CrossChannelDim1",
}

func (e LRNMode) String() string { return _LRNModeNames[e] }

var _DivNormModeNames = map[DivNormMode]string{
	PrecomputedMeans: "PrecomputedMeans",
}

func (e DivNormMode) String() string { return _DivNormModeNames[e] }

var _BatchNormModeNames = map[BatchNormMode]string{
	PerActivation:     "PerActivation",
	Spatial:           "Spatial",
	SpatialPersistent: "SpatialPersistent",
}

func (e BatchNormMode) String() string { return _BatchNormModeNames[e] }

var _SamplerTypeNames = map[SamplerType]string{
	Bilinear: "Bilinear",
}

func (e SamplerType) String() string { return _SamplerTypeNames[e] }

var _RNNModeNames = map[RNNMode]string{
	RNNReLU: "RNNReLU",
	RNNTanh: "RNNTanh",
	LSTM:    "LSTM",
	GRU:     "GRU",
}

func (e RNNMode) String() string { return _RNNModeNames[e] }

var _DirectionModeNames = map[DirectionMode]string{
	Unidirectional: "Unidirectional",
	Bidirectional:  "Bidirectional",
}

func (e DirectionMode) String() string { return _DirectionModeNames[e] }

var _RNNInputModeNames = map[RNNInputMode]string{
	LinearInput: "LinearInput",
	SkipInput:   "SkipInput",
}

func (e RNNInputMode) String() string { return _RNNInputModeNames[e] }

var _RNNAlgoNames = map[RNNAlgo]string{
	Standard:       "Standard",
	PersistStatic:  "PersistStatic",
	PersistDynamic: "PersistDynamic",
}

func (e RNNAlgo) String() string { return _RNNAlgoNames[e] }

var _CTCLossAlgoNames = map[CTCLossAlgo]string{
	DeterministicCTCLoss:    "DeterministicCTCLoss",
	NonDeterministicCTCLoss: "NonDeterministicCTCLoss",
}

func (e CTCLossAlgo) String() string { return _CTCLossAlgoNames[e] }
